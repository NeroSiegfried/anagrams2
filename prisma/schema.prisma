// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  password      String?  // Optional for OAuth users
  displayName   String?
  avatar        String?
  isVerified    Boolean  @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // OAuth accounts
  accounts      Account[]
  
  // Sessions
  sessions      Session[]
  
  // Game relationships
  games         GamePlayer[]
  scores        Score[]
  gameHistory   GameHistory[]
  
  // User preferences
  preferences   UserPreferences?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // oauth, oidc, email
  provider          String  // google, github, discord, etc.
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Game {
  id              String   @id @default(cuid())
  baseWord        String
  letterCount     Int
  duration        Int      // in seconds
  isMultiplayer   Boolean  @default(false)
  isActive        Boolean  @default(true)
  isPublic        Boolean  @default(false)
  maxPlayers      Int      @default(1)
  currentPlayers  Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  startedAt       DateTime?
  endedAt         DateTime?
  
  // Relationships
  players         GamePlayer[]
  scores          Score[]
  gameHistory     GameHistory[]
  
  @@map("games")
}

model GamePlayer {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  isHost    Boolean  @default(false)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@unique([userId, gameId])
  @@map("game_players")
}

model Score {
  id         String   @id @default(cuid())
  score      Int
  wordsFound Int
  timeLeft   Int?     // seconds remaining
  createdAt  DateTime @default(now())
  
  userId     String
  gameId     String
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@map("scores")
}

model GameHistory {
  id         String   @id @default(cuid())
  userId     String
  gameId     String
  baseWord   String
  score      Int
  wordsFound Int
  foundWords Json     // Array of found words
  duration   Int      // actual game duration in seconds
  playedAt   DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@map("game_history")
}

model UserPreferences {
  id                String @id @default(cuid())
  userId            String @unique
  letterCount       Int    @default(6)
  roundDuration     Int    @default(60)
  soundEnabled      Boolean @default(true)
  musicEnabled      Boolean @default(true)
  theme             String @default("light") // light, dark, system
  language          String @default("en")
  notifications     Boolean @default(true)
  
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model Word {
  id          String   @id @default(cuid())
  word        String   @unique
  length      Int
  definition  Json?    // Word definition from API
  isCommon    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@map("words")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}
