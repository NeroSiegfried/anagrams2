import { NextResponse } from "next/server"

// In a real implementation, this would use a dictionary API or database
// For demo purposes, we'll use a small list of common words
const dictionary = [
  "apple",
  "banana",
  "cherry",
  "date",
  "elder",
  "fig",
  "grape",
  "honey",
  "ice",
  "jam",
  "kiwi",
  "lemon",
  "mango",
  "nut",
  "orange",
  "pear",
  "quince",
  "raspberry",
  "strawberry",
  "tangerine",
  "vanilla",
  "watermelon",
  "cat",
  "dog",
  "rat",
  "bat",
  "hat",
  "mat",
  "sat",
  "fat",
  "pat",
  "run",
  "sun",
  "fun",
  "gun",
  "bun",
  "pun",
  "nun",
  "dun",
  "red",
  "bed",
  "fed",
  "led",
  "wed",
  "ned",
  "ted",
  "med",
  "big",
  "dig",
  "fig",
  "jig",
  "pig",
  "rig",
  "wig",
  "zig",
  "box",
  "fox",
  "lox",
  "pox",
  "cox",
  "dox",
  "rox",
  "sox",
  "cup",
  "pup",
  "sup",
  "tup",
  "yup",
  "zup",
  "car",
  "bar",
  "far",
  "jar",
  "mar",
  "par",
  "tar",
  "war",
  "ace",
  "ice",
  "die",
  "lie",
  "pie",
  "tie",
  "vie",
  "ago",
  "ego",
  "duo",
  "arm",
  "aim",
  "dim",
  "him",
  "rim",
  "sim",
  "tim",
  "vim",
  "and",
  "end",
  "bid",
  "did",
  "hid",
  "kid",
  "lid",
  "mid",
  "rid",
  "doe",
  "foe",
  "hoe",
  "joe",
  "roe",
  "toe",
  "woe",
  "bog",
  "cog",
  "dog",
  "fog",
  "hog",
  "jog",
  "log",
  "nog",
  "ash",
  "bay",
  "cay",
  "day",
  "hay",
  "jay",
  "lay",
  "may",
  "nay",
  "pay",
  "ray",
  "say",
  "way",
  "eat",
  "bat",
  "cat",
  "fat",
  "hat",
  "mat",
  "nat",
  "pat",
  "rat",
  "sat",
  "tat",
  "vat",
  "bee",
  "fee",
  "gee",
  "lee",
  "see",
  "tee",
  "wee",
  "zee",
  "beg",
  "keg",
  "leg",
  "meg",
  "peg",
  "bet",
  "get",
  "jet",
  "let",
  "met",
  "net",
  "pet",
  "set",
  "vet",
  "wet",
  "yet",
  "few",
  "dew",
  "hew",
  "jew",
  "mew",
  "new",
  "pew",
  "sew",
  "bye",
  "dye",
  "eye",
  "lye",
  "rye",
  "abs",
  "ads",
  "age",
  "ago",
  "aid",
  "aim",
  "air",
  "ale",
  "all",
  "amp",
  "and",
  "ant",
  "any",
  "ape",
  "app",
  "apt",
  "arc",
  "are",
  "ark",
  "arm",
  "art",
  "ash",
  "ask",
  "asp",
  "ass",
  "ate",
  "awe",
  "axe",
  "aye",
  "bad",
  "bag",
  "ban",
  "bar",
  "bat",
  "bay",
  "bed",
  "bee",
  "beg",
  "bet",
  "bid",
  "big",
  "bin",
  "bio",
  "bit",
  "boa",
  "bob",
  "bog",
  "bon",
  "boo",
  "bow",
  "box",
  "boy",
  "bra",
  "bud",
  "bug",
  "bum",
  "bun",
  "bus",
  "but",
  "buy",
  "bye",
  "cab",
  "cad",
  "cam",
  "can",
  "cap",
  "car",
  "cat",
  "caw",
  "cay",
  "cee",
  "cel",
  "chi",
  "cob",
  "cod",
  "cog",
  "col",
  "con",
  "coo",
  "cop",
  "cor",
  "cos",
  "cot",
  "cow",
  "cox",
  "coy",
  "cry",
  "cub",
  "cud",
  "cue",
  "cum",
  "cup",
  "cut",
  "dab",
  "dad",
  "dag",
  "dam",
  "dan",
  "daw",
  "day",
  "dee",
  "def",
  "del",
  "den",
  "dew",
  "did",
  "die",
  "dig",
  "dim",
  "din",
  "dip",
  "dis",
  "dit",
  "doc",
  "doe",
  "dog",
  "don",
  "dot",
  "dow",
  "dry",
  "dub",
  "due",
  "dug",
  "duh",
  "dun",
  "duo",
  "dye",
  "ear",
  "eat",
  "ebb",
  "ecu",
  "edh",
  "eel",
  "eff",
  "efs",
  "eft",
  "egg",
  "ego",
  "eke",
  "eld",
  "elf",
  "elk",
  "ell",
  "elm",
  "els",
  "eme",
  "emo",
  "ems",
  "emu",
  "end",
  "eng",
  "ens",
  "eon",
  "era",
  "ere",
  "erg",
  "erk",
  "ern",
  "err",
  "ers",
  "ess",
  "eta",
  "eth",
  "eve",
  "ewe",
  "eye",
  "fab",
  "fad",
  "fag",
  "fan",
  "far",
  "fat",
  "fax",
  "fay",
  "fed",
  "fee",
  "fen",
  "fer",
  "fet",
  "few",
  "fey",
  "fez",
  "fib",
  "fid",
  "fie",
  "fig",
  "fil",
  "fin",
  "fir",
  "fit",
  "fix",
  "fiz",
  "flu",
  "fly",
  "fob",
  "foe",
  "fog",
  "foh",
  "fon",
  "fop",
  "for",
  "fou",
  "fox",
  "foy",
  "fro",
  "fry",
  "fub",
  "fud",
  "fug",
  "fun",
  "fur",
  "gab",
  "gad",
  "gae",
  "gag",
  "gal",
  "gam",
  "gan",
  "gap",
  "gar",
  "gas",
  "gat",
  "gay",
  "ged",
  "gee",
  "gel",
  "gem",
  "gen",
  "get",
  "gey",
  "ghi",
  "gib",
  "gid",
  "gie",
  "gif",
  "gig",
  "gin",
  "gip",
  "git",
  "gnu",
  "goa",
  "gob",
  "god",
  "goo",
  "gor",
  "gos",
  "got",
  "gox",
  "goy",
  "gul",
  "gum",
  "gun",
  "gut",
  "guv",
  "guy",
  "gym",
  "gyp",
  "had",
  "hae",
  "hag",
  "hah",
  "haj",
  "ham",
  "hao",
  "hap",
  "has",
  "hat",
  "haw",
  "hay",
  "heh",
  "hem",
  "hen",
  "hep",
  "her",
  "hes",
  "het",
  "hew",
  "hex",
  "hey",
  "hic",
  "hid",
  "hie",
  "him",
  "hin",
  "hip",
  "his",
  "hit",
  "hmm",
  "hob",
  "hod",
  "hoe",
  "hog",
  "hom",
  "hon",
  "hoo",
  "hop",
  "hot",
  "how",
  "hoy",
  "hub",
  "hue",
  "hug",
  "huh",
  "hum",
  "hun",
  "hup",
  "hut",
  "hyp",
  '  "hop',
  "hot",
  "how",
  "hoy",
  "hub",
  "hue",
  "hug",
  "huh",
  "hum",
  "hun",
  "hup",
  "hut",
  "hyp",
  "ice",
  "ick",
  "icy",
  "ids",
  "iff",
  "ifs",
  "ilk",
  "ill",
  "imp",
  "ink",
  "inn",
  "ins",
  "ion",
  "ire",
  "irk",
  "ism",
  "its",
  "ivy",
  "jab",
  "jag",
  "jam",
  "jar",
  "jaw",
  "jay",
  "jee",
  "jet",
  "jeu",
  "jew",
  "jib",
  "jig",
  "jin",
  "job",
  "joe",
  "jog",
  "jot",
  "jow",
  "joy",
  "jug",
  "jun",
  "jus",
  "jut",
  "kab",
  "kae",
  "kaf",
  "kas",
  "kat",
  "kay",
  "kea",
  "kef",
  "keg",
  "ken",
  "kep",
  "kex",
  "key",
  "khi",
  "kid",
  "kif",
  "kin",
  "kip",
  "kir",
  "kit",
  "koa",
  "kob",
  "koi",
  "kon",
  "kop",
  "kor",
  "kos",
  "kue",
  "kye",
  "lab",
  "lac",
  "lad",
  "lag",
  "lam",
  "lap",
  "lar",
  "las",
  "lat",
  "lav",
  "law",
  "lax",
  "lay",
  "lea",
  "led",
  "lee",
  "leg",
  "lei",
  "lek",
  "let",
  "leu",
  "lev",
  "lew",
  "lex",
  "ley",
  "lez",
  "lib",
  "lid",
  "lie",
  "lin",
  "lip",
  "lis",
  "lit",
  "lob",
  "log",
  "loo",
  "lop",
  "lot",
  "low",
  "lox",
  "lug",
  "lum",
  "lux",
  "lye",
  "lym",
  "anagram",
  "puzzle",
  "gaming",
  "letter",
  "player",
  "points",
  "winner",
  "losing",
  "master",
  "genius",
  "wordle",
  "scribe",
  "typing",
  "coding",
  "syntax",
  "script",
  "design",
  "create",
  "invent",
  "system",
]

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url)
  const word = searchParams.get("word")?.toLowerCase()

  if (!word) {
    return NextResponse.json({ error: "Word parameter is required" }, { status: 400 })
  }

  // Check if the word is in our dictionary
  const isValid = dictionary.includes(word)

  // In a real implementation, we would check against a proper dictionary API
  // For demo purposes, we'll add some randomness to simulate a larger dictionary
  const randomValid = Math.random() > 0.3

  return NextResponse.json({ valid: isValid || randomValid })
}
